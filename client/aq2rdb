#! /usr/bin/python
#
#  File - aq2rdb
#
#  Purpose - Python emulation of nwts2rdb.
#
#  Author - Andy Halper <ashalper@usgs.gov>
#

# Python modules
import sys
import getopt
from os.path import basename

# Attempt to use urllib on both Python 2.7.x and 3.5.x.
# See http://python-future.org/compatible_idioms.html#urllib-module

from future.standard_library import install_aliases
install_aliases()
from future.utils import bytes_to_native_str

from urllib.parse import urlencode
from urllib.request import urlopen
from urllib.error import HTTPError

# attribute names are ugly here because we tried to keep them 1:1 with
# their corresponding references in the (legacy) usage statement

class Query:
    def __init__(self, loctzcd, rounding_suppression, water_year_flag,
                 title_line):
        self.loctzcd = loctzcd
        self.rounding_suppression = rounding_suppression
        self.water_year_flag = water_year_flag
        self.title_line = title_line

class DVQuery(Query):
    def __init__(self, loctzcd, rounding_suppression, water_year_flag,
                 title_line, begdate, enddate, computed_only):
        Query.__init__(self, loctzcd, rounding_suppression,
                       water_year_flag, title_line)
        self.begdate = begdate
        self.enddate = enddate
        self.computed_only = computed_only

class UVQuery(Query):
    def __init__(self, loctzcd, rounding_suppression, water_year_flag,
                 title_line, begdtm, enddtm, combine_date_and_time):
        Query.__init__(self, loctzcd, rounding_suppression,
                       water_year_flag, title_line)
        self.begdtm = begdtm
        self.enddtm = enddtm
        self.combine_date_and_time = combine_date_and_time

class TimeSeriesIdentifierQuery(Query):
    def __init__(self, loctzcd, rounding_suppression, water_year_flag,
                 title_line, time_series_identifier, begdtm, enddtm):
        Query.__init__(self, loctzcd, rounding_suppression,
                       water_year_flag, title_line)
        self.time_series_identifier = time_series_identifier
        self.begdtm = begdtm
        self.enddtm = enddtm

class nwts2rdbQuery:
    def __init__(self, datatype, agency, station, parm, statistic):
        self.datatype = datatype
        self.agency = agency
        self.station = station
        self.parm = parm
        self.statistic = statistic

# the dreaded multiple inheritance; actually makes things simpler
# (trust me, and see class diagram in Papyrus model)

class nwts2rdbDVQuery(nwts2rdbQuery, DVQuery):
    def __init__(self, datatype, agency, station, parm, statistic,
                 loctzcd, rounding_suppression, water_year_flag,
                 title_line, begdate, enddate, computed_only):
        nwts2rdbQuery.__init__(self, datatype, agency, station, parm,
                               statistic)
        DVQuery.__init__(self, loctzcd, rounding_suppression,
                         water_year_flag, title_line, begdate,
                         enddate, computed_only)

class nwts2rdbUVQuery(nwts2rdbQuery, UVQuery):
    def __init__(self, datatype, agency, station, parm, statistic,
                 loctzcd, rounding_suppression, water_year_flag,
                 title_line, begdtm, enddtm, combine_date_and_time):
        nwts2rdbQuery.__init__(self, datatype, agency, station, parm,
                               statistic)
        UVQuery.__init__(self, loctzcd, rounding_suppression,
                         water_year_flag, title_line, begdtm, enddtm,
                         combine_date_and_time)

# Display usage information for the aq2rdb command
def usage():
    sys.stderr.write("\n")
    sys.stderr.write("Usage: aq2rdb -ooutfile\n")
    sys.stderr.write("                -zURL\n")
    sys.stderr.write(
        "                -tdatatype (dv, uv)\n"
    )
    sys.stderr.write("                -aagency\n")
    sys.stderr.write("                -nstation\n")
    sys.stderr.write("                -uTimeSeriesIdentifier\n")
    sys.stderr.write(
        "                -pparm AND\n"
    )
    sys.stderr.write("                -sstatistic (dv) OR\n")
    sys.stderr.write(
        "                  uvtype (M)easured, E)dited, R)corrections,\n"
    )
    sys.stderr.write("                          S)hifts, or C)computed\n")
    sys.stderr.write(
        "                -bbegdate (yyyymmdd) (dv) OR\n"
    )
    sys.stderr.write(
        "                  begdtm (yyyymmddhhmmss) (uv)\n"
    )
    sys.stderr.write(
        "                  A string of all zeros indicates beginning of period of record\n"
    )
    sys.stderr.write(
        "                -eenddate (yyyymmdd) (dv) OR\n"
    )
    sys.stderr.write(
        "                  enddtm (yyyymmddhhmmss) (uv)\n"
    )
    sys.stderr.write(
        "                  A string of all nines indicates end of period of record\n"
    )
    sys.stderr.write("                -l loctzcd (time zone code or \"LOC\")\n")
    sys.stderr.write("                -r (rounding suppression)\n")
    sys.stderr.write("                -w (water year flag)\n")
    sys.stderr.write(
        "                -c For type \"dv\", Output COMPUTED daily values only\n"
    )
    sys.stderr.write(
        "                   For other types,\n"
    )
    sys.stderr.write(
        "                   combine date and time in a single column\n"
    )
    sys.stderr.write(
        "                -v Make dates and times verbose (Excel friendly)\n"
    )
    sys.stderr.write(
        "                -y transport_cd (Measured Unit-Values only)\n"
    )
    sys.stderr.write(
        "                    A (ADR), C (CHA), F (FIL), G (EDL), O (OBS),\n"
    )
    sys.stderr.write(
        "                    P (TEL), R (RAD), S (DCP), U (UNS), or Z (BAK)\n"
    )
    sys.stderr.write(
        "                    if omitted, defaults to preferred input\n"
    )
    sys.stderr.write(
        "                -i title_line (Alternate title line if S_STRT is run)\n"
    )
    sys.stderr.write("       If -o is omitted, writes to stdout AND arguments required \n")
    sys.stderr.write("             based on data type as follows:\n")
    sys.stderr.write("             \"dv\" and \"uv\" require -t, -n, -s, -b, -e, AND -p\n")
    sys.stderr.write("       The parameter code is\n")
    sys.stderr.write("             used to find the PRIMARY DD for that parameter.\n")
    sys.stderr.write("       If -a is omitted, defaults to agency \"USGS\"\n")
    sys.stderr.write("       If -l is omitted, it will default to \"LOC\"\n")
    sys.stderr.write("       If -r is present, rounding is suppressed,\n")
    sys.stderr.write("             otherwise rounded values are output.\n")
    sys.stderr.write("       If -w is present, -b, and -e will be water years instead,\n")
    sys.stderr.write("             of dates or datetimes or the user will be prompted\n")
    sys.stderr.write("             for water years instead of dates or datetimes.\n")
    sys.stderr.write("       If -c is present and daily-values are being output, only computed\n")
    sys.stderr.write("             daily values will be retrieved.\n")
    sys.stderr.write("             For other types combine date and time in a single column\n")
    sys.stderr.write("       If -y is present, it is ignored unless Measured Unit-Values\n")
    sys.stderr.write("             are specified as arguments.\n")
    sys.stderr.write("             If omitted, defaults to preferred input.\n")
    sys.stderr.write("       If -i is omitted, the standard S_STRT title line is used.\n")
    sys.stderr.write("\n")
    sys.stderr.write("       If -o is omitted, writes to stdout, and -m cannot be used\n")
    sys.stderr.write("       If -l is omitted, it will default to \"LOC\"\n")
    sys.stderr.write("       If -r is present, rounding is suppressed,\n")
    sys.stderr.write("             otherwise rounded values are output.\n")

def main():
    outpath = None
    z = "qa"
    datatyp = None
    agency = "USGS"
    station = None
    parm = None
    timeSeriesIdentifier = None
    stat = None
    begdat = None
    enddat = None
    loc_tz_cd = None
    transport_cd = None
    titlline = None

    status = 0

    # display usage if no arguments
    if len(sys.argv) <= 1:
        status = 119
    else:
        # get command line arguments 
        rndsup = None
        wyflag = None
        cflag = None
        vflag = None

        error = False

        name = basename(sys.argv[0]) # script name

        try:
            opts, args = getopt.getopt(
                sys.argv[1:], "o:z:t:a:n:p:s:b:e:l:f:y:i:rwcv?"
            )
        except getopt.GetoptError as err:
            sys.stderr.write(name + ": error: " + err.msg)
            usage()
            sys.exit(2)

        for opt, arg in opts:
            if opt == "-o":
                outpath = arg
            elif opt == "-z":
                z = arg
            elif opt == "-t":
                datatyp = arg.upper()
            elif opt == "-a":
                agency = arg
            elif opt == "-n":
                station = arg
            elif opt == "-u":
                timeSeriesIdentifier = arg
            elif opt == "-p":
                parm = arg
            elif opt == "-s":
                stat = arg
            elif opt == "-b":
                begdat = arg
            elif opt == "-e":
                enddat = arg
            elif opt == "-l":
                loc_tz_cd = arg.upper()
            elif opt == "-r":
                rndsup = True
            elif opt == "-w":
                wyflag = True
            elif opt == "-c":
                cflag = True
            elif opt == "-v":
                vflag = True
            elif opt == "-y":
                transport_cd = arg
            elif opt == "-i":
                titlline = arg
            elif opt == "-?":
                error = True

        if outpath:
            f = open(outpath, 'w')        
        elif ( not datatyp or not station or not begdat or not enddat or \
               ((datatyp != "DC" and datatyp != "SV") and not stat) or \
                (not datatyp != "QW" and not parm) or \
               ((datatyp != "MS" and datatyp != "PK" and \
                 datatyp != "WL") and not parm )):
            sys.stderr.write("\n")
            sys.stderr.write(
                "If the -o argument is omitted, then all of -t, -n, -b, -e,\n"
            )
            sys.stderr.write("and -s and -p (or -u) must be present.\n")
            status = 124
        else:
            f = sys.stdout
            
    if status != 0:
        usage()
    else:
        if not loc_tz_cd:
            loc_tz_cd = "LOC"

        # default host is QA
        hostname = "cidasdqaasaq2rd.cr.usgs.gov"

        # "dev" is short-hand for development server
        if z == "dev":
            hostname = "cidasddvasaq2rdb.cr.usgs.gov"
        elif z != "qa":
            # use host name passed in with argument
            hostname = z

        prefix = "http://" + hostname + ":8081/aq2rdb?"

        # TODO: this query bit needs to be in a retry loop (or "try"?)

        query = {
             't': datatyp,
             'a': agency,
             'n': station,
             'p': parm,
             's': stat,
             'b': begdat,
             'e': enddat
        }

        if rndsup:
            query['r'] = str(rndsup).lower()

        if timeSeriesIdentifier:
            query['u'] = timeSeriesIdentifier

        try:
            uo = urlopen(prefix + urlencode(query))
        except HTTPError as e:
            print("# aq2rdb: received HTTP error from server; status code \"" +
                  str(e.code) + "\"; \"" + e.read() + "\"")

        response = uo.read()

        try:
            rdb = bytes_to_native_str(response, "ascii")
        except:
            rdb = None

        f.write(rdb)

        if f != sys.stdout:
            f.close()
            
        # TODO: end of retry loop

    return status

if __name__ == "__main__":
    sys.exit(main())
