#! /usr/bin/python
#
#  File - aq2rdb
#
#  Purpose - Python emulation of nwts2rdb.
#
#  Author - Andy Halper <ashalper@usgs.gov>
#

# Python modules
import sys
from getopt import getopt
from os.path import basename

# aq2rdb module
from write_error import write_error

# Display usage information for the aq2rdb command
def aq2rdb_usage():
    sys.stderr.write("\n")
    sys.stderr.write("Usage: aq2rdb -ooutfile\n")
    sys.stderr.write(
        "                -tdatatype (dv, uv)\n"
    )
    sys.stderr.write("                -aagency\n")
    sys.stderr.write("                -nstation\n")
    sys.stderr.write(
        "                -pparm AND\n"
    )
    sys.stderr.write("                -xloc_nu\n")
    sys.stderr.write("                -sstatistic (dv) OR\n")
    sys.stderr.write(
        "                  uvtype (M)easured, E)dited, R)corrections,\n"
    )
    sys.stderr.write("                          S)hifts, C)computed, or\n")
    sys.stderr.write(
        "                          N)Raw Measured (no conversion of input ratings))\n"
    )
    sys.stderr.write(
        "                -bbegdate (yyyymmdd) (dv) OR\n"
    )
    sys.stderr.write(
        "                  begdtm (yyyymmddhhmmss) (uv)\n"
    )
    sys.stderr.write(
        "                  A string of all zeros indicates beginning of period of record\n"
    )
    sys.stderr.write(
        "                -eenddate (yyyymmdd) (dv) OR\n"
    )
    sys.stderr.write(
        "                  enddtm (yyyymmddhhmmss) (uv)\n"
    )
    sys.stderr.write(
        "                  A string of all nines indicates end of period of record\n"
    )
    sys.stderr.write("                -l loctzcd (time zone code or \"LOC\")\n")
    sys.stderr.write("                -r (rounding suppression)\n")
    sys.stderr.write("                -w (water year flag)\n")
    sys.stderr.write(
        "                -c For type \"dv\", Output COMPUTED daily values only\n"
    )
    sys.stderr.write(
        "                   For other types,\n"
    )
    sys.stderr.write(
        "                   combine date and time in a single column\n"
    )
    sys.stderr.write(
        "                -v Make dates and times verbose (Excel friendly)\n"
    )
    sys.stderr.write(
        "                -y transport_cd (Measured Unit-Values only)\n"
    )
    sys.stderr.write(
        "                    A (ADR), C (CHA), F (FIL), G (EDL), O (OBS),\n"
    )
    sys.stderr.write(
        "                    P (TEL), R (RAD), S (DCP), U (UNS), or Z (BAK)\n"
    )
    sys.stderr.write(
        "                    if omitted, defaults to preferred input\n"
    )
    sys.stderr.write(
        "                -i title_line (Alternate title line if S_STRT is run)\n"
    )
    sys.stderr.write("       If -o is omitted, writes to stdout AND arguments required \n")
    sys.stderr.write("             based on data type as follows:\n")
    sys.stderr.write("             \"dv\" and \"uv\" require -t, -n, -s, -b, -e, AND -p\n")
    sys.stderr.write("       The parameter code is\n")
    sys.stderr.write("             used to find the PRIMARY DD for that parameter.\n")
    sys.stderr.write("       If -a is omitted, defaults to agency \"USGS\"\n")
    sys.stderr.write("       If -l is omitted, it will default to \"LOC\"\n")
    sys.stderr.write("       If -r is present, rounding is suppressed,\n")
    sys.stderr.write("             otherwise rounded values are output.\n")
    sys.stderr.write("       If -w is present, -b, and -e will be water years instead,\n")
    sys.stderr.write("             of dates or datetimes or the user will be prompted\n")
    sys.stderr.write("             for water years instead of dates or datetimes.\n")
    sys.stderr.write("       If -c is present and daily-values are being output, only computed\n")
    sys.stderr.write("             daily values will be retrieved.\n")
    sys.stderr.write("             For other types combine date and time in a single column\n")
    sys.stderr.write("       If -y is present, it is ignored unless Measured Unit-Values\n")
    sys.stderr.write("             are specified as arguments.\n")
    sys.stderr.write("             If omitted, defaults to preferred input.\n")
    sys.stderr.write("       If -m is present, it is ignored.\n")
    sys.stderr.write("       If -i is omitted, the standard S_STRT title line is used.\n")
    sys.stderr.write("\n")
    sys.stderr.write("       If -o is omitted, writes to stdout, and -m cannot be used\n")
    sys.stderr.write("       If -m is present, outfile is used as the output file name prefix.\n")
    sys.stderr.write("             If omitted, all rows in the control file must be the\n")
    sys.stderr.write("             same datatype.\n")
    sys.stderr.write("       If -l is omitted, it will default to \"LOC\"\n")
    sys.stderr.write("       If -r is present, rounding is suppressed,\n")
    sys.stderr.write("             otherwise rounded values are output.\n")
    sys.stderr.write("       If -c is present and daily-values are being output, only computed\n")
    sys.stderr.write("             daily values will be retrieved.\n")
    sys.stderr.write("             If unit-values are being output, date and time\n")
    sys.stderr.write("             are combined into a single datetime column.\n")
    sys.stderr.write("\n")

def main():
    outpath = ' '
    datatyp = ' '
    agency = ' '
    station = ' '
    parm = ' '
    stat = ' '
    begdat = ' '
    enddat = ' '
    loc_tz_cd = ' '
    loc_nu = ' '
    ctlpath = None
    transport_cd = ' '
    titlline = ' '
    oblank = ' '
    tblank = ' '
    ablank = ' '
    nblank = ' '
    dblank = ' '
    pblank = ' '
    sblank = ' '
    yblank = ' '
    iblank = ' '
    bblank = ' '
    eblank = ' '
    lblank = "LOC"
    xblank = '0'
    fblank = ' '
    oflag = False
    tflag = False
    aflag = False
    nflag = False
    pflag = False
    sflag = False
    yflag = False
    iflag = False
    bflag = False
    eflag = False
    lflag = False
    fflag = False
    xflag = False

    status = 0

    # display usage if no arguments
    if len(sys.argv) <= 1:
        status = 119
    else:
        # get command line arguments 
        rndsup = False
        wyflag = False
        cflag = False
        vflag = False
        multiple = False

        error = False

        try:
            opts, args = getopt(
                sys.argv[1:], "o:z:t:a:n:d:p:s:b:e:l:f:y:i:x:rwcvm?"
            )
        except getopt.GetoptError as err:
            # TODO: transplant error-handling code here
            sys.stderr.write("TODO:\n")

        name = basename(sys.argv[0]) # script name

        for opt, arg in opts:
            if opt == "-o":
                oflag = True
                outpath = arg
            elif opt == "-z":
                sys.stderr.write(
                    name +
                    ': NWIS logical database number ("-z" option) is obsolete'
                )
            elif opt == "-t":
                tflag = True
                datatyp = arg.upper()
            elif opt == "-a":
                aflag = True
                agency = arg
            elif opt == "-n":
                nflag = True
                station = arg
            elif opt == "-d":
                sys.stderr.write(
                    name + ': ddid ("-d" option) is obsolete'
                )
            elif opt == "-p":
                pflag = True
                parm = arg
            elif opt == "-s":
                sflag = True
                stat = arg
            elif opt == "-b":
                bflag = True
                begdat = arg
            elif opt == "-e":
                eflag = True
                enddat = arg
            elif opt == "-l":
                lflag = True
                loc_tz_cd = arg.upper()
            elif opt == "-x":
                xflag = True
                loc_nu = arg
            elif opt == "-r":
                rndsup = True
            elif opt == "-w":
                wyflag = True
            elif opt == "-c":
                cflag = True
            elif opt == "-v":
                vflag = True
            elif opt == "-m":
                multiple = True
            elif opt == "-f":
                fflag = True
                ctlpath = arg
            elif opt == "-y":
                yflag = True
                transport_cd = arg
            elif opt == "-i":
                iflag = True
                titlline = arg
            elif opt == "-?":
                error = True

        # if a control file is supplied, all arguments are ignored except
        # -z (database number), -r (suppress rounding), -l (local time zone),
        # -m (multiple file output), and -o (output file).  If -o is not 
        # supplied, -m cannot also be supplied - (can't do multiple files if 
        # everything is going to stdout - one file by definition)
        if fflag and multiple and not oflag:
            sys.stderr.write("\n")
            sys.stderr.write(
                "If -f and -m is specified, -o must also " +
                "be specified."
            )
            status = 122
        elif not fflag and not oflag and \
             ( not tflag or not nflag or not bflag or not eflag or \
               ((datatyp != "DC" and datatyp != "SV") and not sflag) or \
               (not datatyp != "QW" and not pflag) or \
               ((datatyp != "MS" and datatyp != "PK" and \
                 datatyp != "WL") and not pflag )):
            # Not using a control file, -m is ignored.

            # If -o is not specified, all other arguments must be
            # there as the prompting for missing arguments uses ADAPS
            # subroutines that write the prompts to stdout (they're
            # ports from Prime, remember?) so the RDB output has to go
            # to a file, otherwise the prompts would be mixed in with
            # the RDB output which would make things difficult for a
            # pipeline.
            sys.stderr.write("\n")
            sys.stderr.write(
                "If the -o argument is omitted, then all of -t, -n, -b, -e,\n"
            )
            sys.stderr.write("and -s if datatype is not \"dc\", or \"sv\"\n")
            sys.stderr.write("and -p if datatype is \"qw\"\n")
            sys.stderr.write(
                "and -p if datatype is not \"ms\", \"pk\", " +
                "or \"wl\" must be present.\n"
            )
            status = 124

    if status != 0:
        aq2rdb_usage()
    else:
        # get the length of the output file pathname
        if not oflag:
            outpath = oblank
           
        # set data type to blank if not supplied 
        if not tflag:
            datatyp = tblank

        if not aflag:
            agency = ablank

        # get the length of the station number 
        if not nflag:
            station = nblank

        if pflag:
            ddpm = "P" + parm
        else:
            # -p was not specified: construct a blank string
            ddpm = dblank

        if not sflag:
            stat = sblank

        if not yflag:
            transport_cd = yblank

        if not iflag:
            titlline = iblank

        if not bflag:
            begdat = bblank

        if not eflag:
            enddat = eblank

        # get the length of the time zone code
        if not lflag:
            loc_tz_cd = lblank

        # get the length of the location number
        if not xflag:
            loc_nu = xblank

        # TODO: call Web service here

        # TODO: see if it's possible to obtain (operation_cd,
        # operation_tx, error_tx) from "aq2rdb" endpoint to supply to
        # write_error() (3rd, 4th, & 5th actual parameters below,
        # respectively)
        write_error(status, 'aq2rdb', '', '', '', sys.stderr)

    return status

if __name__ == "__main__":
    sys.exit(main())
